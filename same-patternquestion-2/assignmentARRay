1st-questionGiven a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 

Example 1:

Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]
Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]
 
 
 
    solution
     in js by me
/**
 * @param {number[]} nums
 * @return {number[]}
 */
var buildArray = function(nums) {
    let ans=[];
  for (let i=0;i<nums.length;i++){
     // let store= nums[i];
      ans.push(nums[nums[i]]);
  }
  return ans;
  };

in java not by me
class Solution {
    public int[] buildArray(int[] nums) {
        int[] arr = new int[nums.length];
        for(int i=0;i<nums.length;i++) arr[i]=nums[nums[i]]; 
        return arr;
    }
}






2nd qusetion

 Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).

Specifically, ans is the concatenation of two nums arrays.

Return the array ans.

 
ans:-
Example 1:

Input: nums = [1,2,1]
Output: [1,2,1,1,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
- ans = [1,2,1,1,2,1]




/**
 * @param {number[]} nums
 * @return {number[]}
 */
var getConcatenation = function(nums) {
    /*
        let ans=[];
        ans=[...nums,...nums]
        return ans;
    */
    
    //2nd way but not recommended
    let ans =[];
    for(let i=0;i<nums.length;i++){
        ans.push(nums[i])
    }
    for(let i=0;i<nums.length;i++){
        ans.push(nums[i])
    }
    return ans;
    };
    //3rd but logic is not mine 
    

let ans =[];

for(let i=0;i<nums.length;i++){
   ans[i] =nums[i]
 ans[nums.length+i] = nums[i]
}
return ans;


in java not by me 
class Solution {
    public int[] getConcatenation(int[] nums) {
        int len = nums.length;
        int[] ans = new int[len*2];
        for(int i = 0; i < len; i++){
            ans[i] = nums[i];
            ans[i+len] = nums[i];
        }
     
        return ans;
    }
}
//simply use this 
/*arr[i] = nums[i]; // Copy the element from nums to the first half of arr
arr[nums.length + i] = nums[i];  // Copy the same element to the second half of arr
*/ 





Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].


/**
 * @param {number[]} nums
 * @return {number[]}
 */
var runningSum = function(nums) {
    let c=0;
  //  let array=[];
    for(let i=0;i<nums.length;i++){
        let a =nums[i];
        c=c+a;
     //   array.push(c)
         nums[i]=c
    }
   // nums=array;
    return nums
};

You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

 

Example 1:

Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Explanation:
1st customer has wealth = 1 + 2 + 3 = 6
2nd customer has wealth = 3 + 2 + 1 = 6
Both customers are considered the richest with a wealth of 6 each, so return 6.

/**
 * @param {number[][]} accounts
 * @return {number}
 */
var maximumWealth = function(accounts) {
    //  return Math.max(...accounts.map(customer => customer.reduce((acc, curr) => acc + curr, 0)));
    return Math.max(...accounts.map(item=>item.reduce((acc,cul)=>acc+cul,0)))
  };
  
  


  1431. Kids With the Greatest Number of Candies
Easy
3.9K
468
Companies
There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.

Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.

Note that multiple kids can have the greatest number of candies.

 

Example 1:

Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: If you give all extraCandies to:
- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.
- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.
- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.
- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
Example 2:

Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy.
Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.
Example 3:

/**
 * @param {number[]} candies
 * @param {number} extraCandies
 * @return {boolean[]}
 */
var kidsWithCandies = function(candies, extraCandies) {
    let array=[] 
    let flag=true
    
    for (let i=0;i<candies.length;i++){
    let num= candies[i] + extraCandies;
     let max=Math.max(...candies)
     if(num>=max){array.push(true)
     }else{
         array.push(false)
     }

    }


return array
};


1470. Shuffle the Array
Easy
5.3K
268
Companies
Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].

 

Example 1:

Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].
Example 2:

Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]
Example 3:

Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]
 /**
 * @param {number[]} nums
 * @param {number} n
 * @return {number[]}
 */
var shuffle = function(nums, n) {
    /* let result=[]
    let array1=nums.slice(0,n);
    let array2=nums.slice(n)
    for(let i=0;i<nums.length/2;i++){
     result.push(array1[i])
     result.push(array2[i])
    }
   return result*/
   let result=[];
   let outerIndex=0
   for(let i=0;i<n;i++){
   result[outerIndex]=nums[i]
   result[outerIndex+1]=nums[i+n]
   outerIndex += 2;
   
   }
   return result
   
   
   
   
   };
   
   
1512. Number of Good Pairs
Easy
4.3K
204
Companies
Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0

/**
 * @param {number[]} nums
 * @return {number}
*/
var numIdenticalPairs = function(nums) {

    let count = 0;
  
    for (let i = 0; i < nums.length; i++) {
      for (let j = i + 1; j < nums.length; j++) {
        if (nums[i] === nums[j]) {
          count++; 
        }
      }
    }
  
    return count;
  };



  very important
  1512. Number of Good Pairs
Easy
4.3K
204
Companies
Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each 

/**
 * @param {number[]} nums
 * @return {number}
*/
var numIdenticalPairs = function(nums) {
    /*
    let count=0
    for(let i=0;i<nums.length;i++){
        for(let j=i+1;j<nums.length;j++){
            if(nums[i] == nums[j]){
                count++
            }
        }
    }
    return count
    */
    //second and best way 

    //just run this in html and js file to understand this
    //here is file code
   // let check={2:4,4:3}
//console.log( check[2])//4
    /*let arr=[3,5,3]
    let map={}
    let count=0
    for(let c of arr){
     console.log(map[c],"hy",c)
      if(map[c]){
        console.log(map[c],"initial")
        count=count+map[c]
        map[c]+=1
        console.log(map[c],"updted")
      }else{
        map[c]=1
        console.log(map,map[c])
      }
    }
    console.log(map) */
    let counter=0
    let map={}
    
    for(let num of nums){
        if(map[num]){
            counter=counter+map[num]
            map[num]=map[num]+1
        }else{
            map[num]=1
        }
    }
    
    return counter;
    };